<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>{{.Title}}</title>
		<style>
			:root {
				--border: medium solid blue;
			}
			* {
				box-sizing: border-box;
				margin: 0;
				padding: 0;
				user-select: none;
				scrollbar-width: none;
				-ms-overflow-style: none;
			}
			*::-webkit-scrollbar {
				display: none;
			}
			html,
			body {
				height: 100vh;
				overflow: hidden;
				font-family: 'Roboto', sans-serif;
				background: black;
				color: white;
				scroll-behavior: smooth;
			}
			body {
				border: var(--border);
				border-radius: 0.3125em;
			}
			a {
				color: inherit;
				text-decoration: underline;
				text-align: center;
			}
			img {
				max-width: 100%;
				max-height: 90%;
				width: auto;
				height: auto;
				display: block;
				object-fit: contain;
			}
			#app {
				height: 100vh;
				display: grid;
			}
			.panel {
				display: flex;
				align-items: center;
				justify-content: center;
				padding: 1em;
				overflow: hidden;
			}
			.panel > * {
				max-width: 100%;
				object-fit: contain;
			}
			.layout-0-0 {
				grid-template: 1fr / 1fr;
			}
			.layout-1-0 {
				grid-template: 1fr / 1fr 1fr;
			}
			.layout-1-0 .panel:nth-child(1) {
				border-right: var(--border);
			}
			.layout-1-1 {
				grid-template: 1fr 1fr / 1fr;
			}
			.layout-1-1 .panel:nth-child(1) {
				border-bottom: var(--border);
			}
			.layout-2-0,
			.layout-2-1,
			.layout-2-2,
			.layout-2-3 {
				grid-template: 1fr 1fr / 1fr 1fr;
			}
			.layout-2-0 .panel:nth-child(1) {
				grid-row: 1 / 3;
				border-right: var(--border);
			}
			.layout-2-0 .panel:nth-child(2) {
				border-bottom: var(--border);
			}
			.layout-2-1 .panel:nth-child(1) {
				grid-column: 1 / 3;
				border-bottom: var(--border);
			}
			.layout-2-1 .panel:nth-child(2) {
				border-right: var(--border);
				border-bottom: var(--border);
			}
			.layout-2-2 .panel:nth-child(1) {
				grid-column: 1;
				grid-row: 1;
			}
			.layout-2-2 .panel:nth-child(2) {
				grid-column: 1;
				grid-row: 2;
				border-top: var(--border);
			}
			.layout-2-2 .panel:nth-child(3) {
				grid-row: 1 / 3;
				grid-column: 2;
				border-left: var(--border);
			}
			.layout-2-3 .panel:nth-child(1) {
				border-right: var(--border);
			}
			.layout-2-3 .panel:nth-child(3) {
				grid-column: 1 / 3;
				border-top: var(--border);
			}
		</style>
		<script>
			class FrameViewer {
				constructor(apiUrl) {
					window.apiUrl = apiUrl;
					this.frames = [null, []];
					this.app = document.getElementById('app');
					this.panels = Array.from(
						this.app.children,
						(element, i) => ({
							frameIndex: 0,
							element,
						})
					);
					this.layout = 0;
					this.variant = 0;
					this.focus = 0;
					this.layouts = [
						{ panels: 1, variants: 1, rotate: null },
						{ panels: 2, variants: 2, rotate: [1, 0] },
						{ panels: 3, variants: 4, rotate: [2, 0, 1] },
					];
					document.addEventListener('keydown', (e) =>
						this.handleKey(e)
					);
					this.setLayout(0);
					this.render();
				}
				handleKey(e) {
					const actions = {
						1: () => this.setLayout(0),
						2: () => this.setLayout(1),
						3: () => this.setLayout(2),
						4: () => this.rotateFrames(),
						Tab: () => (e.preventDefault(), this.cycleFocus()),
						e: () => this.navigate(1),
						q: () => this.navigate(-1),
					};
					if (actions[e.key]) actions[e.key]();
					this.panels[this.focus]?.element.dispatchEvent(
						new CustomEvent('panelKey', { detail: e })
					);
				}
				navigate(delta) {
					const panel = this.panels[this.focus];
					const max = this.frames[0] ?? 1000;
					panel.frameIndex = (panel.frameIndex + delta + max) % max;
					this.render([this.focus]);
				}
				cycleFocus() {
					this.focus =
						(this.focus + 1) % this.layouts[this.layout].panels;
				}
				rotateFrames() {
					const { rotate } = this.layouts[this.layout];
					if (!rotate) return;

					const rotated = rotate.map(
						(i) => this.panels[i].frameIndex
					);
					rotated.forEach((frameIndex, i) => {
						this.panels[i].frameIndex = frameIndex;
					});
					this.cycleFocus();
					this.render();
				}
				async fetchFrame(idx) {
					if (this.frames[1][idx]) return this.frames[1][idx];

					if (!window.apiUrl) {
						return (this.frames[1][idx] =
							'<div>No API URL configured</div>');
					}
					try {
						const res = await fetch(window.apiUrl, {
							headers: { 'X-Frame': idx.toString() },
						});
						if (!res.ok) throw new Error(`HTTP ${res.status}`);

						const total = res.headers.get('X-Index');
						if (total && !this.frames[0]) {
							this.frames[0] = parseInt(total);
						}
						return (this.frames[1][idx] = await res.text());
					} catch (err) {
						console.error(`Failed to fetch frame ${idx}:`, err);
						return (this.frames[1][
							idx
						] = `<div>Error loading frame ${idx}</div>`);
					}
				}
				setLayout(layout) {
					const layoutChanged = this.layout !== layout;
					if (layoutChanged) {
						if (this.focus >= this.layouts[layout].panels) {
							[
								this.panels[0].frameIndex,
								this.panels[this.focus].frameIndex,
							] = [
								this.panels[this.focus].frameIndex,
								this.panels[0].frameIndex,
							];
							this.focus = 0;
						}
						this.layout = layout;
						this.variant = 0;
					} else {
						this.variant =
							(this.variant + 1) %
							this.layouts[this.layout].variants;
					}
					this.app.className = `layout-${this.layout}-${this.variant}`;
					this.panels.forEach((panel, i) => {
						panel.element.style.display =
							i < this.layouts[this.layout].panels
								? 'flex'
								: 'none';
					});
					if (layoutChanged) this.render();
				}
				async render(indices) {
					const toRender = indices ?? [
						...Array(this.layouts[this.layout].panels).keys(),
					];
					await Promise.all(
						toRender.map(async (i) => {
							const panel = this.panels[i];
							panel.element.innerHTML = await this.fetchFrame(
								panel.frameIndex
							);
							panel.element
								.querySelectorAll('script')
								.forEach((s) => {
									try {
										new Function('panel', s.textContent)(
											panel.element
										);
									} catch (e) {
										console.error(
											'Script execution error:',
											e
										);
									}
								});
						})
					);
				}
			}
			document.addEventListener(
				'DOMContentLoaded',
				() => new FrameViewer('{{.APIURL}}')
			);
		</script>
	</head>
	<body>
		<div id="app">
			<div class="panel"></div>
			<div class="panel"></div>
			<div class="panel"></div>
		</div>
	</body>
</html>
